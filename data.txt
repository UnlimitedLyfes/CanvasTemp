16777030
If a class leaves one method in an interface undeclared, the class is implicitly declared by Java as an abstract class.
false

16777026
In case of using abstract class or function overloading, which function is supposed to be called first?
Function with highest priority in compiler

16786555
An abstract class cannot have instance data and non-abstract methods.
false

16786360
Here is an abstract method defined in the parent: public abstract int sumUp ( int[] arr ); Which of the following is required in a non-abstract child?
public int sumUp ( int[] arr ) { . . . }

16786557
Can an object of a child type be assigned to a variable of the parent type? For example, Card crd; BirthDay bd = new BirthDay("Lucinda", 42); crd = bd;   //  is this correct?
Yes--an object can be assigned to a reference variable of the parent type.

16786558
What is polymorphism in Java?
It is when a single variable is used with several different types of related objects at different places in a program.

16777033
Which of the following classes fail to compile?  abstract class X { abstract void method(); }  abstract class Y extends X { void Method() { } }  abstract class Z extends Y { void Method() { System.out.println("Class Z"); } }
All classes compile

16786559
What determines what method is run in the following: Card crd = new BirthDay("Lucinda", 42); crd.greeting(); The type of the object or the type of the reference variable?
The type of the object.

16786560
Which of the following classes fail to compile?  abstract class X { abstract void method(); }  abstract class Y extends X { }  class Z extends Y { void method() { System.out.println("Class Z"); } }  
All classes compile

16786562
The built-in base class in Java, which is used to handle all exceptions is
Throwable

16786561
An exception may arise when _______________
Input given is invalid

16786564
Will this code compile?  public class Test extends Exception{&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args){  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("My Custom Exception test");  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Test();  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception e){  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Test Exception");  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   }
Yes

16784294
What method of an Exception object returns a message string?
getMessage()

16786563
A method must do either of two things with a checked exception. What are those two things?
(1) Handle the exception in a catch{} block, or (2) throw the exception to the method that called this method.

16777508
What will happen when you compile and run the following code with assertion enabled?  &nbsp;  public class Test{  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args){  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; assert getAge() &gt; 20 : "Not valid";  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Valid");  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }  &nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static int getAge() {  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 21;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   }
The code will compile and print Valid

16786567
Which three statements are true?  &nbsp;  Option1: Assertion checking is typically enabled when a program is deployed.  Option2:It is never appropriate to write code to handle failure of an assert statement.  Option3:Assertion checking is typically enabled during program development and testing.  Option4:Assertion checking can be selectively enabled or disabled on a per-package basis, but not on a per-class basis.  Option5:Assertion checking can be selectively enabled or disabled on both a per-package basis and a per-class basis.  
2,3,5

16786566
public class Test2&nbsp;  {  &nbsp; &nbsp; public static int x;  &nbsp; &nbsp; public static int foo(int y)&nbsp;  &nbsp; &nbsp; {  &nbsp; &nbsp; &nbsp; &nbsp; return y * 2;  &nbsp; &nbsp; }  &nbsp; &nbsp; public static void main(String [] args)&nbsp;  &nbsp; &nbsp; {  &nbsp; &nbsp; &nbsp; &nbsp; int z = 5;  &nbsp; &nbsp; &nbsp; &nbsp; assert z &gt; 0; /* Line 11 */  &nbsp; &nbsp; &nbsp; &nbsp; assert z &gt; 2: foo(z); /* Line 12 */  &nbsp; &nbsp; &nbsp; &nbsp; if ( z &lt; 7 )  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; assert z &gt; 4; /* Line 14 */  &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; switch (z)&nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 4: System.out.println("4 ");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 5: System.out.println("5 ");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default: assert z &lt; 10;  &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; if ( z &lt; 10 )  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; assert z &gt; 4: z++; /* Line 22 */  &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(z);  &nbsp; &nbsp; }  }  Which line is an example of an inappropriate use of assertions?
Line 22

16784298
Program throws ___________ if assert statement fails.
java.lang.AssertionError

